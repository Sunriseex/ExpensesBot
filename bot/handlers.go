package bot

import (
	"bytes"
	"encoding/csv"
	"fmt"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/sirupsen/logrus"
	"github.com/sunriseex/tgbot-money/cache"
	"github.com/sunriseex/tgbot-money/db"
	"github.com/sunriseex/tgbot-money/models"
)

// StartBot –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
func StartBot() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := Bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}
		go handleMessage(update.Message)
	}
}

func handleMessage(msg *tgbotapi.Message) {
	userID := msg.From.ID
	chatID := msg.Chat.ID
	response := tgbotapi.NewMessage(chatID, "")

	switch msg.Command() {
	case "start", "help":
		response.Text = getHelpMessage()
	case "add":
		handleAddCommand(msg.CommandArguments(), userID, &response)
	case "list":
		handleListCommand(userID, &response)
	case "stats_category":
		handleStatsCategoryCommand(msg.CommandArguments(), userID, &response)
	case "top_categories":
		handleTopCategoriesCommand(msg.CommandArguments(), userID, &response)
	case "export":
		handleExportCommand(userID, &response)
	case "clear_cache":
		handleClearCacheCommand(userID, &response)
	case "edit":
		handleEditCommand(msg.CommandArguments(), userID, &response)
	case "delete":
		handleDeleteCommand(msg.CommandArguments(), &response)
	default:
		response.Text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
	}

	if _, err := Bot.Send(response); err != nil {
		logrus.WithError(err).Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
	}
}

func getHelpMessage() string {
	return "üìä –ë–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤\n\n" +
		"–ö–æ–º–∞–Ω–¥—ã:\n" +
		"/add <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n" +
		"/list - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π\n" +
		"/stats_category <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> [week/month] - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n" +
		"/top_categories [week/month] - —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º\n" +
		"/export - —ç–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ CSV\n" +
		"/clear_cache - –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)\n" +
		"/edit <id> <—Å—É–º–º–∞> [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] - –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å\n" +
		"/delete <id> - —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å\n" +
		"/help - —Å–ø—Ä–∞–≤–∫–∞"
}

// –ö–æ–º–∞–Ω–¥–∞ /add: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
func handleAddCommand(args string, userID int64, response *tgbotapi.MessageConfig) {
	parts := strings.Fields(args)
	if len(parts) < 1 {
		response.Text = "–§–æ—Ä–º–∞—Ç: /add 500 –µ–¥–∞"
		return
	}

	amount, err := strconv.ParseFloat(parts[0], 64)
	if err != nil {
		response.Text = "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—É–º–º—ã"
		return
	}

	category := "–¥—Ä—É–≥–æ–µ"
	if len(parts) > 1 {
		category = strings.Join(parts[1:], " ")
	}

	expense := models.Expense{
		UserID:    userID,
		Amount:    amount,
		Category:  category,
		CreatedAt: time.Now(),
	}

	if err := db.DB.Create(&expense).Error; err != nil {
		response.Text = "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"
		logrus.WithError(err).Error("DB Create error")
		return
	}

	// –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥ /list –∏ /stats
	cacheKeys := []string{
		fmt.Sprintf("user:%d:list", userID),
		fmt.Sprintf("user:%d:stats", userID),
	}
	for _, key := range cacheKeys {
		if err := cache.Client.Del(cache.Ctx, key).Err(); err != nil {
			logrus.WithField("key", key).WithError(err).Warn("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–µ—à–∞")
		}
	}

	response.Text = fmt.Sprintf("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: %.2f —Ä—É–±. –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´%s¬ª", amount, category)
}

// –ö–æ–º–∞–Ω–¥–∞ /list: –≤—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Ä–∞—Å—Ö–æ–¥–æ–≤
func handleListCommand(userID int64, response *tgbotapi.MessageConfig) {
	cacheKey := fmt.Sprintf("user:%d:list", userID)
	if cached, err := cache.Client.Get(cache.Ctx, cacheKey).Result(); err == nil {
		response.Text = cached
		return
	} else if err.Error() != "redis: nil" {
		logrus.WithError(err).Warn("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ—à–∞")
	}

	var expenses []models.Expense
	if err := db.DB.Where("user_id = ?", userID).Order("created_at desc").Limit(10).Find(&expenses).Error; err != nil {
		response.Text = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
		logrus.WithError(err).Error("DB error in list")
		return
	}

	if len(expenses) == 0 {
		response.Text = "üóí –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø—É—Å—Ç"
		return
	}

	var builder strings.Builder
	builder.WriteString("üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:\n\n")
	for _, e := range expenses {
		builder.WriteString(fmt.Sprintf("[%d] %s - %.2f —Ä—É–±. (%s)\n",
			e.ID, e.CreatedAt.Format("02.01 15:04"), e.Amount, e.Category))
	}
	output := builder.String()
	response.Text = output

	if err := cache.Client.Set(cache.Ctx, cacheKey, output, 10*time.Minute).Err(); err != nil {
		logrus.WithError(err).Warn("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–µ—à–∞")
	}
}

// –ö–æ–º–∞–Ω–¥–∞ /stats_category: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
func handleStatsCategoryCommand(args string, userID int64, response *tgbotapi.MessageConfig) {
	parts := strings.Fields(args)
	if len(parts) < 1 {
		response.Text = "–§–æ—Ä–º–∞—Ç: /stats_category <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> [week/month]"
		return
	}

	category := parts[0]
	period := "week"
	if len(parts) >= 2 {
		period = parts[1]
	}

	now := time.Now()
	start := now.AddDate(0, 0, -7)
	if period == "month" {
		start = now.AddDate(0, -1, 0)
	}

	var total float64
	err := db.DB.Model(&models.Expense{}).
		Where("user_id = ? AND category = ? AND created_at >= ?", userID, category, start).
		Select("sum(amount)").
		Row().Scan(&total)
	if err != nil {
		response.Text = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
		logrus.WithError(err).Error("DB error in stats_category")
		return
	}

	if total == 0 {
		response.Text = fmt.Sprintf("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´%s¬ª –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥", category)
		return
	}

	response.Text = fmt.Sprintf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´%s¬ª –∑–∞ %s:\n%.2f —Ä—É–±.", category, period, total)
}

// –ö–æ–º–∞–Ω–¥–∞ /top_categories: —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º
func handleTopCategoriesCommand(args string, userID int64, response *tgbotapi.MessageConfig) {
	period := "week"
	if args != "" {
		period = args
	}

	now := time.Now()
	start := now.AddDate(0, 0, -7)
	if period == "month" {
		start = now.AddDate(0, -1, 0)
	}

	type CategoryStat struct {
		Category string
		Total    float64
	}
	var stats []CategoryStat
	if err := db.DB.Model(&models.Expense{}).
		Select("category, sum(amount) as total").
		Where("user_id = ? AND created_at >= ?", userID, start).
		Group("category").
		Order("total desc").
		Scan(&stats).Error; err != nil {
		response.Text = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
		logrus.WithError(err).Error("DB error in top_categories")
		return
	}

	if len(stats) == 0 {
		response.Text = fmt.Sprintf("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ %s", period)
		return
	}

	var builder strings.Builder
	builder.WriteString(fmt.Sprintf("üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞ %s:\n\n", period))
	for _, stat := range stats {
		builder.WriteString(fmt.Sprintf("%s: %.2f —Ä—É–±.\n", stat.Category, stat.Total))
	}
	response.Text = builder.String()
}

// –ö–æ–º–∞–Ω–¥–∞ /export: —ç–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ CSV
func handleExportCommand(userID int64, response *tgbotapi.MessageConfig) {
	var expenses []models.Expense
	if err := db.DB.Where("user_id = ?", userID).Order("created_at asc").Find(&expenses).Error; err != nil {
		response.Text = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"
		logrus.WithError(err).Error("DB error in export")
		return
	}

	if len(expenses) == 0 {
		response.Text = "–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"
		return
	}

	var buf bytes.Buffer
	writer := csv.NewWriter(&buf)
	if err := writer.Write([]string{"ID", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"}); err != nil {
		logrus.WithError(err).Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CSV writer")
		return
	}

	for _, exp := range expenses {
		if err := writer.Write([]string{
			strconv.Itoa(int(exp.ID)),
			exp.CreatedAt.Format("2006-01-02 15:04:05"),
			fmt.Sprintf("%.2f", exp.Amount),
			exp.Category,
		}); err != nil {
			logrus.WithError(err).Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ CSV")
			return
		}
	}
	writer.Flush()
	response.Text = "–≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤:\n" + buf.String()
}

// –ö–æ–º–∞–Ω–¥–∞ /clear_cache: –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func handleClearCacheCommand(userID int64, response *tgbotapi.MessageConfig) {
	pattern := fmt.Sprintf("user:%d:*", userID)
	iter := cache.Client.Scan(cache.Ctx, 0, pattern, 0).Iterator()
	for iter.Next(cache.Ctx) {
		if err := cache.Client.Del(cache.Ctx, iter.Val()).Err(); err != nil {
			logrus.WithField("key", iter.Val()).WithError(err).Error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–µ—à–∞")
		}
	}
	if err := iter.Err(); err != nil {
		logrus.WithError(err).Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–µ—à–∞")
	}
	response.Text = "–ö–µ—à –æ—á–∏—â–µ–Ω"
}

// –ö–æ–º–∞–Ω–¥–∞ /edit: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
// –§–æ—Ä–º–∞—Ç: /edit <id> <—Å—É–º–º–∞> [–∫–∞—Ç–µ–≥–æ—Ä–∏—è]
func handleEditCommand(args string, userID int64, response *tgbotapi.MessageConfig) {
	parts := strings.Fields(args)
	if len(parts) < 2 {
		response.Text = "–§–æ—Ä–º–∞—Ç: /edit <id> <—Å—É–º–º–∞> [–∫–∞—Ç–µ–≥–æ—Ä–∏—è]"
		return
	}
	id, err := strconv.Atoi(parts[0])
	if err != nil {
		response.Text = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID"
		return
	}
	amount, err := strconv.ParseFloat(parts[1], 64)
	if err != nil {
		response.Text = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã"
		return
	}
	var expense models.Expense
	if err := db.DB.First(&expense, id).Error; err != nil {
		response.Text = "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
		return
	}
	if expense.UserID != userID {
		response.Text = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏"
		return
	}
	expense.Amount = amount
	if len(parts) > 2 {
		expense.Category = strings.Join(parts[2:], " ")
	}
	if err := db.DB.Save(&expense).Error; err != nil {
		response.Text = "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"
		logrus.WithError(err).Error("DB update error in edit")
		return
	}

	// –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ (–¥–ª—è /list –∏ /stats)
	cacheKeys := []string{
		fmt.Sprintf("user:%d:list", userID),
		fmt.Sprintf("user:%d:stats", userID),
	}
	for _, key := range cacheKeys {
		if err := cache.Client.Del(cache.Ctx, key).Err(); err != nil {
			logrus.WithField("key", key).WithError(err).Warn("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–µ—à–∞ –≤ edit")
		}
	}

	response.Text = "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
}

// –ö–æ–º–∞–Ω–¥–∞ /delete: —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
// –§–æ—Ä–º–∞—Ç: /delete <id>
func handleDeleteCommand(arg string, response *tgbotapi.MessageConfig) {
	id, err := strconv.Atoi(arg)
	if err != nil {
		response.Text = "–§–æ—Ä–º–∞—Ç: /delete <id>"
		return
	}
	result := db.DB.Delete(&models.Expense{}, id)
	if result.Error != nil {
		response.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏"
		logrus.WithError(result.Error).Error("DB delete error")
		return
	}
	if result.RowsAffected == 0 {
		response.Text = "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
	} else {
		response.Text = "‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞"
	}
}
