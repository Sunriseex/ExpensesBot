package bot

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/sunriseex/tgboy-money/cache"
	"github.com/sunriseex/tgboy-money/db"
	"github.com/sunriseex/tgboy-money/models"
)

// StartBot –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
func StartBot() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := Bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		go handleMessage(update.Message)
	}
}

func handleMessage(msg *tgbotapi.Message) {
	userID := msg.From.ID
	chatID := msg.Chat.ID
	response := tgbotapi.NewMessage(chatID, "")

	switch msg.Command() {
	case "start":
		response.Text = "üìä –ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤\n\n" +
			"–ö–æ–º–∞–Ω–¥—ã:\n" +
			"/add <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n" +
			"/list - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π\n" +
			// –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
			"/stats_category <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> [week/month] - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
	case "add":
		handleAddCommand(msg.CommandArguments(), userID, &response)
	case "list":
		handleListCommand(userID, &response)
	case "stats_category":
		handleStatsCategoryCommand(msg.CommandArguments(), userID, &response)
	default:
		response.Text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
	}

	if _, err := Bot.Send(response); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /add
func handleAddCommand(args string, userID int64, response *tgbotapi.MessageConfig) {
	parts := strings.Fields(args)
	if len(parts) < 1 {
		response.Text = "–§–æ—Ä–º–∞—Ç: /add 500 –µ–¥–∞"
		return
	}

	amount, err := strconv.ParseFloat(parts[0], 64)
	if err != nil {
		response.Text = "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—É–º–º—ã"
		return
	}

	category := "–¥—Ä—É–≥–æ–µ"
	if len(parts) > 1 {
		category = strings.Join(parts[1:], " ")
	}

	expense := models.Expense{
		UserID:    userID,
		Amount:    amount,
		Category:  category,
		CreatedAt: time.Now(),
	}

	if err := db.DB.Create(&expense).Error; err != nil {
		response.Text = "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"
		log.Printf("DB Create error: %v", err)
		return
	}

	// –°–±—Ä–æ—Å –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	cacheKey := fmt.Sprintf("user:%d:expenses", userID)
	if err := cache.Client.Del(cache.Ctx, cacheKey).Err(); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–µ—à–∞: %v", err)
	}

	response.Text = fmt.Sprintf("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: %.2f —Ä—É–±. –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´%s¬ª", amount, category)
}

// –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /list
func handleListCommand(userID int64, response *tgbotapi.MessageConfig) {
	cacheKey := fmt.Sprintf("user:%d:expenses", userID)
	cached, err := cache.Client.Get(cache.Ctx, cacheKey).Result()
	if err == nil {
		response.Text = cached
		return
	}

	var expenses []models.Expense
	err = db.DB.Where("user_id = ?", userID).
		Order("created_at desc").
		Limit(10).
		Find(&expenses).Error
	if err != nil {
		response.Text = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
		log.Printf("DB error: %v", err)
		return
	}

	if len(expenses) == 0 {
		response.Text = "üóí –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø—É—Å—Ç"
		return
	}

	var builder strings.Builder
	builder.WriteString("üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:\n\n")
	for _, e := range expenses {
		builder.WriteString(fmt.Sprintf(
			"[%d] %s - %.2f —Ä—É–±. (%s)\n",
			e.ID,
			e.CreatedAt.Format("02.01 15:04"),
			e.Amount,
			e.Category,
		))
	}

	response.Text = builder.String()
	if err := cache.Client.Set(cache.Ctx, cacheKey, response.Text, 10*time.Minute).Err(); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–µ—à–∞: %v", err)
	}
}

// –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /stats_category
func handleStatsCategoryCommand(args string, userID int64, response *tgbotapi.MessageConfig) {
	parts := strings.Fields(args)
	if len(parts) < 1 {
		response.Text = "–§–æ—Ä–º–∞—Ç: /stats_category <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> [week/month]"
		return
	}

	category := parts[0]
	period := "week"
	if len(parts) >= 2 {
		period = parts[1]
	}

	now := time.Now()
	start := now.AddDate(0, 0, -7)
	if period == "month" {
		start = now.AddDate(0, -1, 0)
	}

	var total float64
	err := db.DB.Model(&models.Expense{}).
		Where("user_id = ? AND category = ? AND created_at >= ?", userID, category, start).
		Select("sum(amount)").
		Row().Scan(&total)
	if err != nil {
		response.Text = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
		log.Printf("DB error in stats_category: %v", err)
		return
	}

	if total == 0 {
		response.Text = fmt.Sprintf("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´%s¬ª –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥", category)
		return
	}

	response.Text = fmt.Sprintf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´%s¬ª –∑–∞ %s:\n%.2f —Ä—É–±.", category, period, total)
}
